{"ast":null,"code":"export const CREATE = 'create';\n/**\n * expects: CreateChannelDto\n * Creates a channel\n * on success emits:\n *  CHANNELS, USER_CHANNELS\n */\nexport const DELETE = 'delete';\n/**\n * expects: cIdDto\n * Deletes a channel and everything related to it, only owner should be able to do it\n * on success emits:\n *  CHANNELS, USER_CHANNELS\n */\nexport const JOIN = 'join';\n/**\n * expects: JoinChannelDto\n * Session user joins a channel. If protected, I need to give a password as well\n * on success emits:\n *  USER_CHANNELS\n * //TODO maybe also CHANNEL_USERS to channel users, if thesre's time\n */\nexport const USER_CHANNELS = 'userChannels';\n/**\n * Gets the channels and DMs that the session user is in\n * on success emits:\n *      USER_CHANNELS, ChannelToFeDto[]\n */\nexport const CHANNEL_USERS = 'channelUsers';\n/**\n * expects: cidDto\n * on success emits:\n *      CHANNEL_USERS, USER[]\n */\nexport const CHANNELS = 'channels';\n/**\n *  Gets all existing channels, except private ones\n *  on success emits:\n *      CHANNELS, ChannelToFeDto[]\n */\nexport const CHANNEL_MESSAGES = 'messages';\n/**\n *  expects: cIdDto\n *  Gets all the messages inside channel\n *  on success emits:\n *      CHANNEL_MESSAGES, Message[]\n */\nexport const LEAVE = 'leave';\n/**\n *  expects: cIdDto\n *  Session user leaves channel\n *  on success emits:\n *      USER_CHANNELS, ChannelToFeDto[]\n * //TODO maybe users to all channel users\n */\nexport const ADD_ADMIN = 'admin+';\n// Session user makes another user admin\nexport const REM_ADMIN = 'admin-';\n// Session user removes user from admins array\n/**\n * expects: UpdateChannelDto\n * on success emits:\n *  ?SUCCESS?\n *\n *\n*/\nexport const BAN = 'ban';\nexport const UNBAN = 'unban';\nexport const KICK = 'kick';\nexport const MUTE = 'mute';\nexport const UNMUTE = 'unmute'; //there's no unmute\n/**\n *  Session user KICKs (UN)BANs (UN)MUTEs user from (talking while muted in) channel,\n */\n/**\n * expects: UpdateChannelDto\n * on success emits:\n *  - ?SUCCESS? CHANNEL?\n *  - KICK BAN: CHANNEL_USERS,  //TODO maybe users to all channel users\n *\n*/\nexport const DIRECT = 'privMsg';\n/**\n * Send direct message to user. Creates a channel between the two users\n * expects: PrivMsgDto\n * on success emits:\n *  - broadcasts the message: MESSAGE, Message\n *\n */\n//\nexport const CHANNEL = 'channel';\n// Doesn't do shit for me\n// 'getChannel', { cIdDto }\n/**\n * expects: cIdDto\n * emits:\n *  CHANNEL, Channel\n */\nexport const MESSAGE = 'newMsg';\n/**\n * Sending a message to a channel\n *  expects: CreateMessageDto\n *\n */\nexport const PASSWORD = 'password';\n/**\n * Use when you want to change, add or remove a password.\n * Usage: If there is no password already, I fill in newPass to make channel protected.\n * If there is a password already, I fill in newPass to change the password.\n * Or I can send the oldPass only to remove password protection\n *\n * expects: ChannelPasswordDto\n */\nexport const INVITE_TO_PRIVATE = 'inviteToPriv';\n/**\n * Session user invites user to channel\n * //TODO the flow stil in dev\n * expects: UpdateChannelDto\n */\nexport const ACCEPT_PRIVATE_INVITE = 'AcceptToPriv';\n/**\n * Session user accepts invitation to private channel\n * //TODO the flow stil in dev\n * expects: PrivateInviteDto\n */\nexport const DECLINE_PRIVATE_INVITE = 'declineToPriv';\n/**\n * Session user declines invitation to private channel\n * //TODO the flow stil in dev\n * expects: PrivateInviteDto\n */\nexport const BLOCK = 'block';\nexport const UNBLOCK = 'unblock';\n/**\n * expects: uIdDto\n * disables(enables back) communication between users\n * emits:\n *  not defined yet\n */\n/*\n    **  events:\n*/\nexport const ERROR = 'error';\n/**\n * emitted on error, or no rights\n *\n * emits:\n *  ERROR, error: any\n */\nexport const SUCCESS = 'success';\n/**\n * Backend emits success\n * emits:\n *  'success', (to be determined)\n */\n/*\n\n// Backend emits all channels the session user is in\n'usersChannels', Channel[] -> ChannelToFeDto[]\n\n// Backend emits all channels available except private ones\n'allChannels', Channel[] -> ChannelToFeDto[]\n\n// Incoming messages. Need to compare with current channelid to see if I need to display or not\n'incMsg', { Message }\n\n// Fetch channel messages. Should always be subscribed to. Changes when we emit different getChannelMessages to socket\n'channelMessages', Message[]\n*/\n/**\n * Invite types to send to backend\n * */\nexport const USER_STATUS = \"user-status\";\nexport const GAME_INVITE = 'game';\nexport const CHANNEL_INVITE = 'channel';\nexport const ACCEPT_MATCH = 'accept';\nexport const INVITE_TO_MATCH = 'invite';","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}