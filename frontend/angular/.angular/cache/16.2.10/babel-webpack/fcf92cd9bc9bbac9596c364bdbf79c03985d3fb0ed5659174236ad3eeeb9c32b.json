{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./chat.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../shared/navbar/navbar.component\";\nimport * as i4 from \"../shared/error-message/error-message.component\";\nimport * as i5 from \"./sidebar-channel/sidebar-channel.component\";\nimport * as i6 from \"./create-channel-button/create-channel-button.component\";\nimport * as i7 from \"./default-content/default-content.component\";\nimport * as i8 from \"./channel-messages-content/channel-messages-content.component\";\nimport * as i9 from \"./channel-creation-menu/channel-creation-menu.component\";\nimport * as i10 from \"./channel-join-popup/channel-join-popup.component\";\nimport * as i11 from \"./direct-message/direct-message.component\";\nfunction ChatComponent_div_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"app-sidebar-channel\", 16);\n    i0.ɵɵlistener(\"click\", function ChatComponent_div_12_div_1_Template_app_sidebar_channel_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const channel_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.onChannelSelect(channel_r6));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const channel_r6 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"isSelected\", channel_r6.id === (ctx_r5.selectedChannel == null ? null : ctx_r5.selectedChannel.id))(\"channel\", channel_r6);\n  }\n}\nfunction ChatComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, ChatComponent_div_12_div_1_Template, 2, 2, \"div\", 15);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 1, ctx_r0.myChannels$));\n  }\n}\nfunction ChatComponent_div_13_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"app-sidebar-channel\", 16);\n    i0.ɵɵlistener(\"click\", function ChatComponent_div_13_div_1_Template_app_sidebar_channel_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const channel_r10 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onChannelSelect(channel_r10));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const channel_r10 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"isSelected\", channel_r10.id === (ctx_r9.selectedChannel == null ? null : ctx_r9.selectedChannel.id))(\"channel\", channel_r10);\n  }\n}\nfunction ChatComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, ChatComponent_div_13_div_1_Template, 2, 2, \"div\", 15);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 1, ctx_r1.allChannels$));\n  }\n}\nfunction ChatComponent_app_channel_messages_content_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-channel-messages-content\", 17);\n    i0.ɵɵlistener(\"channelChange\", function ChatComponent_app_channel_messages_content_18_Template_app_channel_messages_content_channelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.selectedChannel = $event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"channel\", ctx_r2.selectedChannel);\n  }\n}\nfunction ChatComponent_app_default_content_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-default-content\");\n  }\n}\nfunction ChatComponent_app_error_message_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-message\", 18);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"message\", ctx_r4.errorMessage);\n  }\n}\nexport let ChatComponent = /*#__PURE__*/(() => {\n  class ChatComponent {\n    constructor(chatService) {\n      this.chatService = chatService;\n      this.selectedTab = 'my-chats';\n      this.myChannels$ = this.chatService.getUsersChannels();\n      this.allChannels$ = this.chatService.getChannels();\n      this.channelCreationPopup = false;\n      this.passwordInputPopup = false;\n      this.directMsgPopup = false;\n    }\n    ngOnInit() {\n      this.chatService.requestUserChannels();\n      this.chatService.requestChannels();\n      this.chatService.onError().subscribe(error => {\n        this.displayError(error.message);\n        console.error(error);\n      });\n    }\n    onChannelSelect(channel) {\n      this.selectedChannel = channel;\n      if (this.selectedTab === 'available-chats') {\n        if (this.selectedChannel.protected) {\n          this.selectedTab = 'my-chats';\n          this.passwordInputPopup = true;\n          this.channelCreationPopup = false;\n          this.directMsgPopup = false;\n        } else {\n          this.chatService.joinChannel({\n            id: this.selectedChannel.id,\n            password: this.passwordToJoinChannel\n          });\n          this.selectTab('my-chats');\n          // this.selectedChannel = channel\n        }\n      } else {\n        this.chatService.requestChannelMessages(channel.id);\n      }\n    }\n    createNewChannel(channelType) {\n      this.channelToCreate = channelType;\n      this.selectTab('my-chats');\n      this.channelCreationPopup = true;\n      this.directMsgPopup = false;\n      this.passwordInputPopup = false;\n    }\n    createDm() {\n      this.directMsgPopup = true;\n      this.passwordInputPopup = false;\n      this.channelCreationPopup = false;\n    }\n    selectTab(tab) {\n      if (tab === 'my-chats') {\n        this.selectedTab = 'my-chats';\n        this.selectedChannel = undefined;\n        this.chatService.requestUserChannels();\n      } else {\n        this.selectedTab = 'available-chats';\n        this.selectedChannel = undefined;\n        this.chatService.requestChannels();\n      }\n    }\n    displayError(message) {\n      this.errorMessage = message;\n      setTimeout(() => {\n        this.errorMessage = undefined;\n      }, 5000);\n    }\n    static #_ = this.ɵfac = function ChatComponent_Factory(t) {\n      return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.ChatService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatComponent,\n      selectors: [[\"app-chat\"]],\n      decls: 22,\n      vars: 14,\n      consts: [[1, \"chat-interface\"], [1, \"channel-container-border\"], [1, \"channel-tabs\"], [3, \"click\"], [1, \"channel-container\"], [\"class\", \"channel-list\", 4, \"ngIf\"], [3, \"createChannelEvent\", \"createDmEvent\"], [1, \"content-container\"], [3, \"channelType\", \"isOpen\", \"isOpenChange\"], [3, \"channel\", \"isOpen\", \"isOpenChange\"], [3, \"channel\", \"channelChange\", 4, \"ngIf\"], [3, \"isOpen\", \"isOpenChange\"], [4, \"ngIf\"], [\"class\", \"error-message\", 3, \"message\", 4, \"ngIf\"], [1, \"channel-list\"], [4, \"ngFor\", \"ngForOf\"], [3, \"isSelected\", \"channel\", \"click\"], [3, \"channel\", \"channelChange\"], [1, \"error-message\", 3, \"message\"]],\n      template: function ChatComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"body\");\n          i0.ɵɵelement(1, \"app-navbar\");\n          i0.ɵɵelementStart(2, \"div\", 0)(3, \"div\", 1)(4, \"div\", 2)(5, \"div\", 3);\n          i0.ɵɵlistener(\"click\", function ChatComponent_Template_div_click_5_listener() {\n            return ctx.selectTab(\"my-chats\");\n          });\n          i0.ɵɵelementStart(6, \"h1\");\n          i0.ɵɵtext(7, \"My Chats:\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"div\", 3);\n          i0.ɵɵlistener(\"click\", function ChatComponent_Template_div_click_8_listener() {\n            return ctx.selectTab(\"available-chats\");\n          });\n          i0.ɵɵelementStart(9, \"h1\");\n          i0.ɵɵtext(10, \"Available Chats:\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(11, \"div\", 4);\n          i0.ɵɵtemplate(12, ChatComponent_div_12_Template, 3, 3, \"div\", 5);\n          i0.ɵɵtemplate(13, ChatComponent_div_13_Template, 3, 3, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"app-create-channel-button\", 6);\n          i0.ɵɵlistener(\"createChannelEvent\", function ChatComponent_Template_app_create_channel_button_createChannelEvent_14_listener($event) {\n            return ctx.createNewChannel($event);\n          })(\"createDmEvent\", function ChatComponent_Template_app_create_channel_button_createDmEvent_14_listener() {\n            return ctx.createDm();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"div\", 7)(16, \"app-channel-creation-menu\", 8);\n          i0.ɵɵlistener(\"isOpenChange\", function ChatComponent_Template_app_channel_creation_menu_isOpenChange_16_listener($event) {\n            return ctx.channelCreationPopup = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"app-channel-join-popup\", 9);\n          i0.ɵɵlistener(\"isOpenChange\", function ChatComponent_Template_app_channel_join_popup_isOpenChange_17_listener($event) {\n            return ctx.passwordInputPopup = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(18, ChatComponent_app_channel_messages_content_18_Template, 1, 1, \"app-channel-messages-content\", 10);\n          i0.ɵɵelementStart(19, \"app-direct-message\", 11);\n          i0.ɵɵlistener(\"isOpenChange\", function ChatComponent_Template_app_direct_message_isOpenChange_19_listener($event) {\n            return ctx.directMsgPopup = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(20, ChatComponent_app_default_content_20_Template, 1, 0, \"app-default-content\", 12);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(21, ChatComponent_app_error_message_21_Template, 1, 1, \"app-error-message\", 13);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵclassProp(\"selected\", ctx.selectedTab === \"my-chats\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵclassProp(\"selected\", ctx.selectedTab === \"available-chats\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedTab === \"my-chats\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedTab === \"available-chats\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"channelType\", ctx.channelToCreate)(\"isOpen\", ctx.channelCreationPopup);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"channel\", ctx.selectedChannel)(\"isOpen\", ctx.passwordInputPopup);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedChannel && ctx.passwordInputPopup == false);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"isOpen\", ctx.directMsgPopup);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedChannel === undefined || ctx.passwordInputPopup);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf, i3.NavbarComponent, i4.ErrorMessageComponent, i5.SidebarChannelComponent, i6.CreateChannelButtonComponent, i7.DefaultContentComponent, i8.ChannelMessagesContentComponent, i9.ChannelCreationMenuComponent, i10.ChannelJoinPopupComponent, i11.DirectMessageComponent, i2.AsyncPipe],\n      styles: [\"body[_ngcontent-%COMP%]{background-color:#4f6d7a;position:relative}.chat-interface[_ngcontent-%COMP%]{width:80%;height:77%;margin:auto;display:flex}.channel-container-border[_ngcontent-%COMP%]{width:25%;border:.7dvw solid #E8DAB2;position:relative}.error-message[_ngcontent-%COMP%]{position:absolute;left:50%;transform:translate(-50%,-50%);z-index:2;width:100%;height:100%}.channel-container-border[_ngcontent-%COMP%]   app-create-channel-button[_ngcontent-%COMP%]{position:absolute;left:50%;transform:translate(-50%);z-index:2}.channel-container[_ngcontent-%COMP%]{margin:.7dvw;max-height:80%;overflow:auto}.channel-tabs[_ngcontent-%COMP%]{width:100%;height:10%;display:flex;align-items:center;justify-content:center;background-color:#405862}.channel-tabs[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{width:50%;height:100%;display:flex;align-items:center;justify-content:center;border:.1dvw solid #405862;border-bottom:.1dvw solid #344851}.channel-tabs[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:hover{cursor:pointer}.channel-tabs[_ngcontent-%COMP%]   .selected[_ngcontent-%COMP%]{background-color:#344851;border:.1dvw solid #344851;border-bottom:.1dvw solid #E8DAB2}.channel-tabs[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{padding:0;height:100%;align-self:center;display:flex;align-items:center;font-family:Bodoni Moda,serif;font-size:1.2dvw;margin:auto;color:#e8dab2}.content-container[_ngcontent-%COMP%]{border-top:.7dvw solid #E8DAB2;border-bottom:.7dvw solid #E8DAB2;border-right:.7dvw solid #E8DAB2;width:75%;overflow:hidden;position:relative;z-index:1}\"]\n    });\n  }\n  return ChatComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}