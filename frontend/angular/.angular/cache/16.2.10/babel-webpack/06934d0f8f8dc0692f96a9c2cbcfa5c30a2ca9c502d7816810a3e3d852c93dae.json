{"ast":null,"code":"import _asyncToGenerator from \"/app-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { GameState } from '../entities.interface';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./game.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../shared/navbar/navbar.component\";\nimport * as i5 from \"./game-menu/game-menu.component\";\nfunction GameComponent_app_game_menu_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-game-menu\", 3);\n    i0.ɵɵlistener(\"newGameEvent\", function GameComponent_app_game_menu_2_Template_app_game_menu_newGameEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.setGame($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"statusValue\", ctx_r0.statusStr);\n  }\n}\nfunction GameComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 5)(2, \"div\", 6);\n    i0.ɵɵelement(3, \"div\", 7)(4, \"div\", 8)(5, \"div\", 9)(6, \"div\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 11);\n    i0.ɵɵelement(8, \"div\", 12)(9, \"div\", 13)(10, \"div\", 14)(11, \"div\", 15)(12, \"div\", 16)(13, \"div\", 17)(14, \"div\", 18)(15, \"div\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(16, \"div\", 20);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction GameComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"h1\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(4, \"svg\", 22);\n    i0.ɵɵelement(5, \"rect\", 23)(6, \"line\", 24)(7, \"rect\", 25)(8, \"rect\", 25)(9, \"circle\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(10, \"h1\");\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 13, ctx_r2.yourScore, \"1.0-0\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵattribute(\"x\", ctx_r2.paddleLeftX + \"px\")(\"y\", ctx_r2.paddleLeftY + \"px\")(\"width\", ctx_r2.paddleWidth + \"%\")(\"height\", ctx_r2.paddleHeight + \"%\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x\", ctx_r2.paddleRightX + \"px\")(\"y\", ctx_r2.paddleRightY + \"px\")(\"width\", ctx_r2.paddleWidth + \"%\")(\"height\", ctx_r2.paddleHeight + \"%\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"cx\", ctx_r2.ballX + \"px\")(\"cy\", ctx_r2.ballY + \"px\")(\"r\", ctx_r2.ballRadius + \"%\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(12, 16, ctx_r2.opponentScore, \"1.0-0\"));\n  }\n}\nexport let GameComponent = /*#__PURE__*/(() => {\n  class GameComponent {\n    constructor(renderer, rendererFactory, elementReference, gameService, route) {\n      this.renderer = renderer;\n      this.rendererFactory = rendererFactory;\n      this.elementReference = elementReference;\n      this.gameService = gameService;\n      this.route = route;\n      this.matchLeftSide = true;\n      this.yourScore = 0;\n      this.opponentScore = 0;\n      this.maxViewHeight = 546;\n      this.maxViewWidth = 1092;\n      // TODO THIS VALUE SHOULD GO INTO THE ENV\n      this.maxHeight = 500;\n      this.maxWidth = 1000;\n      this.ballCanMove = true;\n      this.paddleCanMove = true;\n      this.ballWidth = 3;\n      this.ballHeight = 3;\n      this.paddleWidth = 1;\n      this.paddleHeight = 20;\n      this.paddleMargin = 3;\n      this.paddleSpeed = 1;\n      this.paddleRightX = this.maxViewWidth - 40;\n      this.paddleRightY = 40;\n      this.paddleLeftY = 40;\n      this.paddleLeftX = 40;\n      this.ballX = 500;\n      this.ballY = 250;\n      this.ballRadius = 1.5;\n      this.paddleLeftIncrement = 0;\n      this.paddleRightIncrement = 0;\n      this.statusStr = \"\";\n      this.gameInfo = {};\n      this.paddlePositionChange = new EventEmitter();\n      this.isInQueue = false;\n      this.isGameOn = false;\n      /* Router params for game invite */\n      this.invited = false;\n      this.accepted = false;\n      this.observableAreOn = false;\n      this.gameQueue = false;\n      this.gameObservableOn = false;\n      this.gameService.getUser();\n      this.renderer = rendererFactory.createRenderer(null, null);\n    }\n    checkBoardSize() {\n      if (this.isGameOn) {\n        this.boardElement = this.elementReference.nativeElement.querySelector('.table');\n        this.maxViewWidth = this.boardElement.clientWidth;\n        this.maxViewHeight = this.boardElement.clientHeight;\n      }\n    }\n    ngAfterViewInit() {\n      this.checkBoardSize();\n    }\n    onKeyDown(e) {\n      if (e.code === 'KeyW') {\n        this.gameService.emitPaddlePosition(\"-10\");\n      }\n      if (e.code === 'KeyS') {\n        this.gameService.emitPaddlePosition(\"+10\");\n      }\n    }\n    onKeyUp(e) {\n      if (e.code === 'KeyW' || e.code === 'KeyS') {\n        this.paddlePositionChange.emit(\"0\");\n      }\n    }\n    onResize(e) {\n      this.checkBoardSize();\n    }\n    /*\n      Update score,\n      should I change the value of the color of\n      the ball depending on the game choice?\n    */\n    updateScore(scores) {\n      let id = this.gameService.userInfo.id;\n      this.yourScore = scores[id];\n      for (const score in scores) {\n        if (id != score) {\n          this.opponentScore = scores[score];\n        }\n      }\n    }\n    /*\n      the backend send position related to a window 2:1\n      in frontend we use % so we need to translate the values\n      that's how we do that:\n    */\n    valueConversion(game) {\n      this.checkBoardSize();\n      if (game.ball) {\n        if (this.matchLeftSide === true) {\n          game.ball.position.x = this.maxViewWidth / this.maxWidth * game.ball.position.x;\n          game.ball.position.y = this.maxViewHeight / this.maxHeight * game.ball.position.y;\n        } else {\n          game.ball.position.x = this.maxViewWidth - this.maxViewWidth / this.maxWidth * game.ball.position.x;\n          game.ball.position.y = this.maxViewHeight / this.maxHeight * game.ball.position.y;\n        }\n      }\n      if (game.leftPaddle) {\n        game.leftPaddle.position.x = this.maxViewWidth / this.maxWidth * game.leftPaddle.position.x;\n        game.leftPaddle.position.y = this.maxViewHeight / this.maxHeight * game.leftPaddle.position.y;\n      }\n      if (game.rightPaddle) {\n        game.rightPaddle.position.x = this.maxViewWidth / this.maxWidth * game.rightPaddle.position.x;\n        game.rightPaddle.position.y = this.maxViewHeight / this.maxHeight * game.rightPaddle.position.y;\n      }\n      return game;\n    }\n    moveBall(ball) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.ballX = ball.position.x;\n        _this.ballY = ball.position.y;\n      })();\n    }\n    /*\n      since the values comes from backend this function move the\n      rightPaddle or the leftPaddle depending if the game is Leftside or not\n      if yes: then this move the Right Paddle;\n      if not: it moves the left;\n    */\n    moveRightPaddle(rightPaddle) {\n      if (this.matchLeftSide === true) {\n        this.paddleRightY = rightPaddle.position.y;\n        this.paddleRightX = rightPaddle.position.x;\n      } else {\n        this.paddleLeftY = rightPaddle.position.y;\n        this.paddleRightX = rightPaddle.position.x;\n      }\n    }\n    /*\n      same as the one upstairs\n    */\n    moveLeftPaddle(leftPaddle) {\n      if (this.matchLeftSide === true) {\n        this.paddleLeftY = leftPaddle.position.y;\n        this.paddleLeftX = leftPaddle.position.x;\n      } else {\n        this.paddleRightY = leftPaddle.position.y;\n        this.paddleLeftX = leftPaddle.position.x;\n      }\n    }\n    startPlaying() {\n      if (this.gameInfo) {\n        if (this.gameInfo.ball) {\n          const ball = this.gameInfo.ball;\n          window.requestAnimationFrame(() => this.moveBall(ball));\n        }\n        if (this.gameInfo.leftPaddle && this.gameInfo.rightPaddle) {\n          const paddle = this.gameInfo.leftPaddle;\n          window.requestAnimationFrame(() => this.moveLeftPaddle(paddle));\n        }\n        if (this.gameInfo.rightPaddle) {\n          const paddle = this.gameInfo.rightPaddle;\n          window.requestAnimationFrame(() => this.moveRightPaddle(paddle));\n        }\n        if (this.gameInfo.scores) {\n          const scores = this.gameInfo.scores;\n          window.requestAnimationFrame(() => this.updateScore(scores));\n        }\n      }\n    }\n    // ------------------------------------------------------------------------------------------------ INIT VALUE\n    initViewValue() {\n      let element = document.getElementById(\"board\");\n      if (element?.height && element?.width) {\n        console.log(\"HEIGHT:\" + element.height + \" WIDTH: \" + element.width);\n        this.maxViewHeight = element?.height.baseVal.value;\n        this.maxViewWidth = element?.width.baseVal.value;\n      }\n    }\n    isWaitingInQueue() {\n      this.gameService.getStatusQueue().subscribe(status => {\n        if (status === true) {\n          ;\n        } else {\n          this.isInQueue = false;\n          this.invited = false;\n          this.isGameOn = true;\n        }\n      });\n    }\n    handlerQueueInfo(status) {\n      if (status === true) {\n        this.gameQueue = true;\n      } else {\n        this.gameQueue = false;\n        this.isGameOn = true;\n        this.initViewValue();\n      }\n    }\n    handlerGameInfo(game) {\n      if (game && game.gameStatus !== GameState.END) {\n        if (this.settledSide === false) {\n          if (game.match?.players[0].id === this.gameService.userInfo.id) {\n            this.matchLeftSide = true;\n          } else {\n            this.matchLeftSide = false;\n          }\n          this.settledSide = true;\n        }\n        console.log(\"BEFORE CONVERSION\");\n        console.log(JSON.stringify(game));\n        this.gameInfo = this.valueConversion(game);\n        // console.log( \"USER ID Player [0]: \" + this.gameInfo.match?.players[0].id +\n        //                \"\\nUSER ID Player [1]: \" + this.gameInfo.match?.players[1].id +\n        //                \"\\nMY ID: \" + this.gameService.userInfo.id + \n        //                \"\\nball: \" + this.gameInfo.ball?.position.x + \" \" + this.gameInfo.ball?.position.y +\n        //                \"\\nmatch score: \" + this.gameInfo.match?.currentUserScore + \" id: \"\n        //                            +  this.gameInfo.match?.id + \" loser: \" \n        //                            +  this.gameInfo.match?.loser + \" matchResult: \"  \n        //                            +  this.gameInfo.match?.matchResult + \" opponentUser: \"  \n        //                            +  this.gameInfo.match?.opponentUser + \" oppoentScore: \"  \n        //                            +  this.gameInfo.match?.opponentUserScore + \" status: \"  \n        //                            +  this.gameInfo.match?.status + \" winner: \"  \n        //                            +  this.gameInfo.match?.winner );\n        if (this.gameInfo.leftPaddle?.length) {\n          this.paddleHeight = 100 / this.maxHeight * this.gameInfo.leftPaddle?.length;\n        }\n      }\n      this.startPlaying();\n    }\n    handlerStatusInfo(data) {\n      this.status = data;\n      if (this.status === GameState.READY) this.readyFunc();else if (this.status === GameState.START) this.startFunc();else if (this.status === GameState.INPROGRESS) this.progressFunc();else if (this.status === GameState.PAUSE) this.pauseFunc();else if (this.status === GameState.END) this.endFunc();\n    }\n    handlerInvite() {\n      this.settledSide = false;\n      this.gameQueue = true;\n      this.isWaitingInQueue();\n    }\n    handlerAccept() {\n      this.gameQueue = false;\n      this.settledSide = false;\n      this.isGameOn = true;\n    }\n    gameObservableInit() {\n      if (!this.gameObservableOn) {\n        this.gameObservableOn = true;\n        this.sub = this.gameService.getGameObservable().subscribe(game => {\n          console.log(\"Received game update from observable:\");\n          console.log(JSON.stringify(game));\n          this.handlerGameInfo(game);\n        });\n        this.subOne = this.gameService.getGameStatus().subscribe(data => {\n          console.log(\"Received game status update:\");\n          console.log(JSON.stringify(data));\n          this.handlerStatusInfo(data);\n        });\n        this.subTwo = this.gameService.getStatusQueue().subscribe(status => {\n          console.log(\"Received queue status update:\");\n          console.log(JSON.stringify(status));\n          this.handlerQueueInfo(status);\n        });\n      }\n    }\n    ngOnInit() {\n      this.gameService.handleConnection();\n      this.gameObservableInit();\n      this.invited = 'true' === this.route.snapshot.paramMap.get('invite');\n      this.accepted = 'true' === this.route.snapshot.paramMap.get('accept');\n      console.log(\"SITUATION:  \" + this.invited + \" & \" + this.accepted);\n      if (this.invited === true) {\n        this.handlerInvite();\n      }\n      if (this.accepted === true) {\n        this.handlerAccept();\n      }\n    }\n    readyFunc() {\n      console.log(\"READY\");\n    }\n    startFunc() {}\n    progressFunc() {}\n    pauseFunc() {\n      this.settledSide = false;\n      this.invited = false;\n      this.accepted = false;\n      this.gameQueue = false;\n      this.isGameOn = false;\n      this.winnerPrompt();\n    }\n    endFunc() {\n      console.log(\"END\");\n      // this.gameService.socket.disconnect();\n      // this.gameService.socket.connect()\n      this.settledSide = false;\n      this.invited = false;\n      this.accepted = false;\n      this.gameQueue = false;\n      this.isGameOn = false;\n      this.winnerPrompt();\n    }\n    winnerPrompt() {\n      if (this.gameInfo?.match?.winner.id === this.gameService.userInfo.id) {\n        this.statusStr = \"WIN\";\n      } else {\n        this.statusStr = \"LOS\";\n      }\n    }\n    resetAll() {\n      ;\n    }\n    ngOnDestroy() {\n      // this.gameService.listenersOn = false;\n      if (this.sub) {\n        this.sub.unsubscribe();\n        this.subOne?.unsubscribe();\n        this.subTwo?.unsubscribe();\n      }\n      this.gameService.handleDisconnection();\n      this.isGameOn = false;\n      // this.gameService.socket.disconnection();\n    }\n\n    setGame(event) {\n      this.settledSide = false;\n      // this.gameService.socket.connect();\n      // this.gameService.listenersInit();\n      console.log(\"going to start emit\");\n      this.gameService.startGameService(event);\n      this.gameQueue = true;\n      this.isWaitingInQueue();\n    }\n    static #_ = this.ɵfac = function GameComponent_Factory(t) {\n      return new (t || GameComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.RendererFactory2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.GameService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: GameComponent,\n      selectors: [[\"app-game\"]],\n      hostBindings: function GameComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown\", function GameComponent_keydown_HostBindingHandler($event) {\n            return ctx.onKeyDown($event);\n          }, false, i0.ɵɵresolveWindow)(\"keyup\", function GameComponent_keyup_HostBindingHandler($event) {\n            return ctx.onKeyUp($event);\n          }, false, i0.ɵɵresolveWindow)(\"resize\", function GameComponent_resize_HostBindingHandler($event) {\n            return ctx.onResize($event);\n          }, false, i0.ɵɵresolveWindow);\n        }\n      },\n      outputs: {\n        paddlePositionChange: \"paddlePositionChange\"\n      },\n      decls: 5,\n      vars: 3,\n      consts: [[3, \"statusValue\", \"newGameEvent\", 4, \"ngIf\"], [\"class\", \"waitingQueue\", 4, \"ngIf\"], [\"class\", \"game_board\", 4, \"ngIf\"], [3, \"statusValue\", \"newGameEvent\"], [1, \"waitingQueue\"], [1, \"coffe-machine\"], [1, \"coffee-header\"], [1, \"coffee-header__buttons\", \"coffee-header__button-one\"], [1, \"coffee-header__buttons\", \"coffee-header__button-two\"], [1, \"coffee-header__display\"], [1, \"coffee-header__details\"], [1, \"coffee-medium\"], [1, \"coffe-medium__exit\"], [1, \"coffee-medium__arm\"], [1, \"coffee-medium__liquid\"], [1, \"coffee-medium__smoke\", \"coffee-medium__smoke-one\"], [1, \"coffee-medium__smoke\", \"coffee-medium__smoke-two\"], [1, \"coffee-medium__smoke\", \"coffee-medium__smoke-three\"], [1, \"coffee-medium__smoke\", \"coffee-medium__smoke-for\"], [1, \"coffee-medium__cup\"], [1, \"coffee-footer\"], [1, \"game_board\"], [\"width\", \"50%\", \"height\", \"50%\", \"fill\", \"#4F6D7A\", 1, \"table\"], [\"id\", \"board\", \"width\", \"100%\", \"height\", \"100%\", \"viewBox\", \"0 0 1 2\"], [\"id\", \"net\", \"x1\", \"50%\", \"y1\", \"0px\", \"x2\", \"50%\", \"y2\", \"100%\"], [1, \"paddle\"], [\"id\", \"ball\", \"stroke-width\", \"2\"]],\n      template: function GameComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"body\");\n          i0.ɵɵelement(1, \"app-navbar\");\n          i0.ɵɵtemplate(2, GameComponent_app_game_menu_2_Template, 1, 1, \"app-game-menu\", 0);\n          i0.ɵɵtemplate(3, GameComponent_div_3_Template, 17, 0, \"div\", 1);\n          i0.ɵɵtemplate(4, GameComponent_div_4_Template, 13, 19, \"div\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.gameQueue && !ctx.isGameOn && !ctx.invited);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.gameQueue && !ctx.isGameOn || ctx.invited && !ctx.isGameOn && !ctx.accepted);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isGameOn || !ctx.invited && ctx.accepted);\n        }\n      },\n      dependencies: [i3.NgIf, i4.NavbarComponent, i5.GameMenuComponent, i3.DecimalPipe],\n      styles: [\"@import\\\"https://db.onlinewebfonts.com/c/eaa110aa369eee0cf5c29493c362bbef?family=Bodoni+MT+Poster+Compressed+V2\\\";body[_ngcontent-%COMP%]{background-color:#4f6d7a;position:relative}.game_board[_ngcontent-%COMP%]{background-color:#4f6d7a;width:100%;height:100%;margin:auto;display:flex;justify-content:space-between;align-items:center}.table[_ngcontent-%COMP%]{width:1080px;height:540px;stroke:#e8dab2;stroke-width:-10%}.game_menu[_ngcontent-%COMP%]{width:800;height:300;display:flex;align-items:center}.waitingQueue[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;width:100%;height:60%;flex-direction:column}.loadingSpinner[_ngcontent-%COMP%]{border:10px solid #E8DAB2;border-top:4px solid #4F6D7A;border-radius:50%;width:100px;height:100px;animation:_ngcontent-%COMP%_spin 1s linear infinite}@keyframes _ngcontent-%COMP%_spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}app-game-menu[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center}h1[_ngcontent-%COMP%]{margin:0;padding:0;display:flex;justify-content:center;font-family:Bodoni MT Poster Compressed V2;font-size:23dvw;font-weight:400;color:#2f424a}#ball[_ngcontent-%COMP%]{fill:#4f6d7a;stroke:#e8dab2}#net[_ngcontent-%COMP%]{stroke:#e8dab2;stroke-dasharray:15;stroke-width:.3%}.start_button[_ngcontent-%COMP%]{display:flex}.paddle[_ngcontent-%COMP%]{fill:#e8dab2}.coffe-machine[_ngcontent-%COMP%]{width:300px;height:280px;position:absolute;top:calc(50% - 140px);left:calc(50% - 150px)}.coffee-header[_ngcontent-%COMP%]{width:100%;height:80px;position:absolute;top:0;left:0;background-color:#ddcfcc;border-radius:10px}.coffee-header__buttons[_ngcontent-%COMP%]{width:25px;height:25px;position:absolute;top:25px;background-color:#282323;border-radius:50%}.coffee-header__buttons[_ngcontent-%COMP%]:after{content:\\\"\\\";width:8px;height:8px;position:absolute;bottom:-8px;left:calc(50% - 4px);background-color:#615e5e}.coffee-header__button-one[_ngcontent-%COMP%]{left:15px}.coffee-header__button-two[_ngcontent-%COMP%]{left:50px}.coffee-header__display[_ngcontent-%COMP%]{width:75px;height:25px;position:absolute;top:calc(50% - 25px);left:calc(50% - 25px);border-radius:0%;background-color:#487679;border:5px solid #E8DAB2;box-sizing:border-box}.coffee-header__details[_ngcontent-%COMP%]{width:8px;height:20px;position:absolute;top:10px;right:10px;background-color:#9b9091;box-shadow:-12px 0 #9b9091,-24px 0 #9b9091}.coffee-medium[_ngcontent-%COMP%]{width:90%;height:160px;position:absolute;top:80px;left:5%;background-color:#bcb0af}.coffee-medium[_ngcontent-%COMP%]:before{content:\\\"\\\";width:90%;height:100px;background-color:#776f6e;position:absolute;bottom:0;left:5%;border-radius:20px 20px 0 0}.coffe-medium__exit[_ngcontent-%COMP%]{width:60px;height:20px;position:absolute;top:0;left:calc(50% - 30px);background-color:#231f20}.coffe-medium__exit[_ngcontent-%COMP%]:before{content:\\\"\\\";width:50px;height:20px;border-radius:0 0 50% 50%;position:absolute;bottom:-20px;left:calc(50% - 25px);background-color:#231f20}.coffe-medium__exit[_ngcontent-%COMP%]:after{content:\\\"\\\";width:10px;height:10px;position:absolute;bottom:-30px;left:calc(50% - 5px);background-color:#231f20}.coffee-medium__arm[_ngcontent-%COMP%]{width:70px;height:20px;position:absolute;top:15px;right:25px;background-color:#231f20}.coffee-medium__arm[_ngcontent-%COMP%]:before{content:\\\"\\\";width:15px;height:5px;position:absolute;top:7px;left:-15px;background-color:#9e9495}.coffee-medium__cup[_ngcontent-%COMP%]{width:80px;height:47px;position:absolute;bottom:0;left:calc(50% - 40px);background-color:#fff;border-radius:0 0 70px 70px/0 0 110px 110px}.coffee-medium__cup[_ngcontent-%COMP%]:after{content:\\\"\\\";width:20px;height:20px;position:absolute;top:6px;right:-13px;border:5px solid #FFF;border-radius:50%}@keyframes _ngcontent-%COMP%_liquid{0%{height:0px;opacity:1}5%{height:0px;opacity:1}20%{height:62px;opacity:1}95%{height:62px;opacity:1}to{height:62px;opacity:0}}.coffee-medium__liquid[_ngcontent-%COMP%]{width:6px;height:63px;opacity:0;position:absolute;top:50px;left:calc(50% - 3px);background-color:#74372b;animation:_ngcontent-%COMP%_liquid 4s 4s linear infinite}.coffee-medium__smoke[_ngcontent-%COMP%]{width:8px;height:20px;position:absolute;border-radius:5px;background-color:#b3aeae}@keyframes _ngcontent-%COMP%_smokeOne{0%{bottom:20px;opacity:0}40%{bottom:50px;opacity:.5}80%{bottom:80px;opacity:.3}to{bottom:80px;opacity:0}}@keyframes _ngcontent-%COMP%_smokeTwo{0%{bottom:40px;opacity:0}40%{bottom:70px;opacity:.5}80%{bottom:80px;opacity:.3}to{bottom:80px;opacity:0}}.coffee-medium__smoke-one[_ngcontent-%COMP%]{opacity:0;bottom:50px;left:102px;animation:_ngcontent-%COMP%_smokeOne 3s 4s linear infinite}.coffee-medium__smoke-two[_ngcontent-%COMP%]{opacity:0;bottom:70px;left:118px;animation:_ngcontent-%COMP%_smokeTwo 3s 5s linear infinite}.coffee-medium__smoke-three[_ngcontent-%COMP%]{opacity:0;bottom:65px;right:118px;animation:_ngcontent-%COMP%_smokeTwo 3s 6s linear infinite}.coffee-medium__smoke-for[_ngcontent-%COMP%]{opacity:0;bottom:50px;right:102px;animation:_ngcontent-%COMP%_smokeOne 3s 5s linear infinite}.coffee-footer[_ngcontent-%COMP%]{width:95%;height:15px;position:absolute;bottom:25px;left:2.5%;background-color:#1d3946;border-radius:10px}.coffee-footer[_ngcontent-%COMP%]:after{content:\\\"\\\";width:106%;height:26px;position:absolute;bottom:-25px;left:-8px;background-color:#000}\"]\n    });\n  }\n  return GameComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}