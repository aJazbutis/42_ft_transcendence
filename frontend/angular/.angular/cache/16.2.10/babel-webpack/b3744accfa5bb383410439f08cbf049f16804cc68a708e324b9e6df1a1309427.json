{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { debounceTime, distinctUntilChanged, switchMap, tap } from 'rxjs';\nimport { FormControl } from '@angular/forms';\nimport { CHANNEL_INVITE } from '../../subscriptions-events-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../chat.service\";\nimport * as i2 from \"src/app/profile/profile.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"./channel-user/channel-user.component\";\nfunction ChannelMessagesSettingsComponent_label_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 12);\n    i0.ɵɵtext(1, \"Change your channel's password:\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChannelMessagesSettingsComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelement(1, \"input\", 14);\n    i0.ɵɵelementStart(2, \"button\", 15);\n    i0.ɵɵtext(3, \"Change\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ChannelMessagesSettingsComponent_label_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 16);\n    i0.ɵɵtext(1, \"Search for user to invite:\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChannelMessagesSettingsComponent_div_9_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 20)(1, \"span\", 21);\n    i0.ɵɵlistener(\"click\", function ChannelMessagesSettingsComponent_div_9_div_2_Template_span_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const user_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.sendInviteToChannel(user_r6.id));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const user_r6 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", user_r6.username, \" \");\n  }\n}\nfunction ChannelMessagesSettingsComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelement(1, \"input\", 18);\n    i0.ɵɵtemplate(2, ChannelMessagesSettingsComponent_div_9_div_2_Template, 3, 1, \"div\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControl\", ctx_r3.privateUserSearch);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.searchedUsers);\n  }\n}\nfunction ChannelMessagesSettingsComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-channel-user\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r9 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"user\", user_r9)(\"currentUser\", ctx_r4.currentUser)(\"channel\", ctx_r4.channel);\n  }\n}\nexport let ChannelMessagesSettingsComponent = /*#__PURE__*/(() => {\n  class ChannelMessagesSettingsComponent {\n    constructor(chatService, profileService) {\n      this.chatService = chatService;\n      this.profileService = profileService;\n      this.isOpenChange = new EventEmitter();\n      this.channelChangeEvent = new EventEmitter();\n      this.users = [];\n      this.privateUserSearch = new FormControl();\n    }\n    ngOnInit() {\n      this.profileService.getCurrentUser().subscribe(user => this.currentUser = user);\n      if (this.channel) {\n        this.chatService.requestChannelUsers(this.channel.id);\n        this.chatService.getChannelUsers().subscribe(channelUsers => {\n          if (channelUsers.cId === this.channel?.id) this.users = channelUsers.users;\n        });\n      }\n      this.privateUserSearch.valueChanges.pipe(debounceTime(500), distinctUntilChanged(), switchMap(username => this.chatService.findUser(username).pipe(tap(users => {\n        this.searchedUsers = users;\n        console.log(users);\n      })))).subscribe();\n    }\n    ngOnChanges(changes) {\n      if (changes['channel'] && this.channel) {\n        this.chatService.requestChannelUsers(this.channel.id);\n      }\n    }\n    exitChannel() {\n      if (!this.channel) return; // A check for typescript\n      this.chatService.exitChannel(this.channel.id);\n      this.toggle();\n      this.channel = undefined;\n      this.channelChangeEvent.emit(this.channel);\n    }\n    sendInviteToChannel(userID) {\n      this.chatService.sendDM(userID, `Hey, I'm inviting you to a super cool secret channel called ${this.channel?.name}`, CHANNEL_INVITE, this.channel?.id);\n    }\n    toggle() {\n      this.isOpen = !this.isOpen;\n      this.isOpenChange.emit(this.isOpen);\n    }\n    static #_ = this.ɵfac = function ChannelMessagesSettingsComponent_Factory(t) {\n      return new (t || ChannelMessagesSettingsComponent)(i0.ɵɵdirectiveInject(i1.ChatService), i0.ɵɵdirectiveInject(i2.ProfileService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChannelMessagesSettingsComponent,\n      selectors: [[\"app-channel-messages-settings\"]],\n      inputs: {\n        isOpen: \"isOpen\",\n        channel: \"channel\"\n      },\n      outputs: {\n        isOpenChange: \"isOpenChange\",\n        channelChangeEvent: \"channelChangeEvent\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 17,\n      vars: 6,\n      consts: [[1, \"channel-messages-settings-border\"], [1, \"channel-messages-settings\"], [1, \"title\"], [\"for\", \"change-password\", 4, \"ngIf\"], [\"class\", \"password-field-container\", 4, \"ngIf\"], [\"for\", \"user-search\", 4, \"ngIf\"], [\"class\", \"invite-to-channel\", 4, \"ngIf\"], [1, \"users-container\"], [4, \"ngFor\", \"ngForOf\"], [1, \"footer\"], [1, \"exit\", 3, \"click\"], [1, \"close\", 3, \"click\"], [\"for\", \"change-password\"], [1, \"password-field-container\"], [\"type\", \"password\", \"id\", \"change-password\"], [1, \"change-btn\"], [\"for\", \"user-search\"], [1, \"invite-to-channel\"], [\"type\", \"text\", \"id\", \"user-search\", 3, \"formControl\"], [\"class\", \"name\", 4, \"ngFor\", \"ngForOf\"], [1, \"name\"], [1, \"user-dropdown\", 3, \"click\"], [3, \"user\", \"currentUser\", \"channel\"]],\n      template: function ChannelMessagesSettingsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n          i0.ɵɵtext(3, \"Channel Settings.\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"p\");\n          i0.ɵɵtext(5, \"To access the different options, hover over a user's name and click the dropdown menu.\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(6, ChannelMessagesSettingsComponent_label_6_Template, 2, 0, \"label\", 3);\n          i0.ɵɵtemplate(7, ChannelMessagesSettingsComponent_div_7_Template, 4, 0, \"div\", 4);\n          i0.ɵɵtemplate(8, ChannelMessagesSettingsComponent_label_8_Template, 2, 0, \"label\", 5);\n          i0.ɵɵtemplate(9, ChannelMessagesSettingsComponent_div_9_Template, 3, 2, \"div\", 6);\n          i0.ɵɵelementStart(10, \"div\", 7);\n          i0.ɵɵtemplate(11, ChannelMessagesSettingsComponent_div_11_Template, 2, 3, \"div\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"div\", 9)(13, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function ChannelMessagesSettingsComponent_Template_button_click_13_listener() {\n            return ctx.exitChannel();\n          });\n          i0.ɵɵtext(14, \"Exit channel\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function ChannelMessagesSettingsComponent_Template_button_click_15_listener() {\n            return ctx.toggle();\n          });\n          i0.ɵɵtext(16, \"Close\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"@openClose\", ctx.isOpen ? \"open\" : \"closed\");\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", (ctx.channel == null ? null : ctx.channel.owner) === ctx.currentUser);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.channel == null ? null : ctx.channel.owner) === ctx.currentUser);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.channel == null ? null : ctx.channel.private);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.channel == null ? null : ctx.channel.private);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.users);\n        }\n      },\n      dependencies: [i3.NgForOf, i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlDirective, i5.ChannelUserComponent],\n      styles: [\"@import\\\"https://fonts.googleapis.com/css2?family=Bodoni+Moda:ital,opsz,wght@1,6..96,700&display=swap\\\";.channel-messages-settings-border[_ngcontent-%COMP%]{position:absolute;width:40%;z-index:3;border:.1dvw solid #2f424a;box-sizing:border-box;filter:drop-shadow(0 .1dvw .2dvw rgba(0,0,0,.8));right:0%;max-height:100%;height:100%}.channel-messages-settings[_ngcontent-%COMP%]{position:relative;box-sizing:border-box;background-color:#4f6d7a;border:.7dvw solid #E8DAB2;max-height:100%;height:100%;overflow:auto}.title[_ngcontent-%COMP%]{margin:5% 5% 3%;color:#2f424a;font-family:Bodoni Moda,serif;font-size:1.5dvw;text-align:center;justify-content:center}p[_ngcontent-%COMP%]{margin:0% 10% 5%;padding:0%;font-family:Quattrocento,serif;font-weight:bolder;color:#2f424a;font-size:.7dvw}label[_ngcontent-%COMP%]{display:block;margin-left:10%;margin-top:0%;font-size:1dvw;font-family:Quattrocento,serif;font-weight:bolder;color:#e8dab2}.password-field-container[_ngcontent-%COMP%], .invite-to-channel[_ngcontent-%COMP%]{margin:3% 10%;display:flex}.invite-to-channel[_ngcontent-%COMP%]{flex-direction:column}.user-dropdown[_ngcontent-%COMP%]{background-color:#e8dab2;box-sizing:border-box;border:.1dvw solid #E8DAB2;width:100%;padding:.5dvw;border:.1dvw solid #2f424a;display:flex}.name[_ngcontent-%COMP%]{padding-left:0dvw;font-family:Quattrocento,serif;font-size:1dvw;font-weight:700;color:#4f6d7a;text-overflow:ellipsis;overflow:hidden}.user-dropdown[_ngcontent-%COMP%]:hover{cursor:pointer;background-color:#e9d5a1}input[_ngcontent-%COMP%]{padding:2%;width:67.3%;font-size:.9dvw;font-family:Quattrocento,serif;font-weight:bolder;border:none;border-bottom:.1dvw solid #E8DAB2;border-top:.1dvw solid #425c68;background-color:#425c68;color:#e8dab2;outline:none}.invite-to-channel[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:96%;height:1.5dvw}.change-btn[_ngcontent-%COMP%]{font-size:1dvw;height:2.4dvw;width:5dvw}.users-container[_ngcontent-%COMP%]{margin:0% 10% 25%}button[_ngcontent-%COMP%]{color:#4f6d7a;background-color:#e8dab2;font-size:1.2dvw;font-family:Quattrocento,serif;font-weight:bolder;border:none;cursor:pointer;align-self:center;justify-self:center;height:2.3dvw;width:5.5dvw;border:.2dvh solid #2f424a}button[_ngcontent-%COMP%]:hover{background-color:#e9d5a1}.footer[_ngcontent-%COMP%]{position:fixed;bottom:.69dvw;right:3.35dvw;left:2.65dvw;background-color:#4f6d7a}.close[_ngcontent-%COMP%]{float:right;margin:7% 0%}.exit[_ngcontent-%COMP%]{margin:7% 0%;color:#b04343;width:8.6dvw;border:.2dvh solid #4a2f2f}\"],\n      data: {\n        animation: [trigger('openClose', [state('open', style({\n          width: '40%',\n          right: '0%'\n        })), state('closed', style({\n          width: '40%',\n          right: '-42%'\n        })), transition('open <=> closed', [animate('.7s cubic-bezier(.49,.07,.39,.93)')])])]\n      }\n    });\n  }\n  return ChannelMessagesSettingsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}