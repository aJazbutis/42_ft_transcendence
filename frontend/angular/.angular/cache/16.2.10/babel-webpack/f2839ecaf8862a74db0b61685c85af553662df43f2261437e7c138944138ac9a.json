{"ast":null,"code":"import { USER_STATUS } from '../chat/subscriptions-events-constants';\nimport { HOST_IP } from '../Constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../app.module\";\nexport let ProfileService = /*#__PURE__*/(() => {\n  class ProfileService {\n    constructor(http, userSocket) {\n      this.http = http;\n      this.userSocket = userSocket;\n      this.domain = HOST_IP;\n    }\n    getCurrentUser() {\n      const url = `${this.domain}/user/profile`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    getUser(userID) {\n      const url = `${this.domain}/user/profile/${userID}`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    getCurrentUserFriends() {\n      const url = `${this.domain}/user/friends`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    getCurrentUserSentRequests() {\n      const url = `${this.domain}/user/friends/requests`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    getCurrentUserReceivedRequests() {\n      const url = `${this.domain}/user/friends/pending`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    getFriends(userID) {\n      const url = `${this.domain}/user/${userID}/friends`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    setAvatar(formData) {\n      const url = `${this.domain}/user/image/upload`;\n      return this.http.post(url, formData, {\n        withCredentials: true\n      });\n    }\n    setName(username) {\n      const url = `${this.domain}/user/username`;\n      this.http.patch(url, {\n        username: username\n      }, {\n        withCredentials: true\n      }).subscribe();\n    }\n    setTitle(title) {\n      const url = `${this.domain}/user/title`;\n      this.http.patch(url, {\n        title: title\n      }, {\n        withCredentials: true\n      }).subscribe();\n    }\n    sendRequest(friendID) {\n      const url = `${this.domain}/user/request-friend`;\n      return this.http.post(url, {\n        friendId: friendID\n      }, {\n        withCredentials: true\n      }); // Post with ID in the body\n    }\n\n    acceptRequest(friendID) {\n      const url = `${this.domain}/user/add-friend`;\n      return this.http.patch(url, {\n        friendId: friendID\n      }, {\n        withCredentials: true\n      }); // Patch with ID in the body\n    }\n\n    declineRequest(friendID) {\n      const url = `${this.domain}/user/decline-friend`;\n      return this.http.patch(url, {\n        friendId: friendID\n      }, {\n        withCredentials: true\n      }); // Patch with ID in the body\n    }\n\n    removeFriend(friendID) {\n      const url = `${this.domain}/user/friend/${friendID}`;\n      return this.http.delete(url, {\n        withCredentials: true\n      });\n    }\n    getCurrentUserRank() {\n      const url = `${this.domain}/ranking/level`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    getRank(userID) {\n      const url = `${this.domain}/ranking/${userID}/level`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    getCurrentUserStats() {\n      const url = `${this.domain}/ranking/stats`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    getStats(userID) {\n      const url = `${this.domain}/ranking/${userID}/stats`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    getCurrentUserHistory() {\n      const url = `${this.domain}/ranking/history`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    getHistory(userID) {\n      const url = `${this.domain}/ranking/${userID}/history`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    enable2FA(email) {\n      const url = `${this.domain}/user/enable-mfa`;\n      return this.http.patch(url, {\n        email: email\n      }, {\n        withCredentials: true\n      });\n    }\n    disable2FA() {\n      const url = `${this.domain}/user/disable-mfa`;\n      return this.http.patch(url, {}, {\n        withCredentials: true\n      });\n    }\n    enableSend2FA() {\n      const url = `${this.domain}/42auth/send-code-mfa`;\n      return this.http.get(url, {\n        withCredentials: true\n      });\n    }\n    verificationEnable2FA(code) {\n      const url = `${this.domain}/42auth/verify-mfa`;\n      return this.http.post(url, {\n        code: code\n      }, {\n        withCredentials: true\n      });\n    }\n    statusListener() {\n      return this.userSocket.fromEvent(USER_STATUS);\n    }\n    requestStatus(userID) {\n      this.userSocket.emit(USER_STATUS, {\n        id: userID\n      });\n    }\n    static #_ = this.ɵfac = function ProfileService_Factory(t) {\n      return new (t || ProfileService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserSocket));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProfileService,\n      factory: ProfileService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ProfileService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}